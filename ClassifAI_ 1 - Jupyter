{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ClassifAI: 1 - Jupyter","provenance":[{"file_id":"1OU-HY9G3zroi85rah_-syuVPMc1Y7EwN","timestamp":1654019597524},{"file_id":"1HIORmhcRBsWGxjMkyYIvQnm3wbfq9avh","timestamp":1653847973998}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"hupooiN2tOXb"},"source":["# Welcome to your Jupyter notebook!\n","\n","Run python code easily and see it's output\n","\n","* Jupyter Notebook is a mix between the terminal and a file"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qi9EEQGdtYEa","executionInfo":{"status":"ok","timestamp":1653847955380,"user_tz":420,"elapsed":180,"user":{"displayName":"Leo Huang","userId":"10046166245660810812"}},"outputId":"fc030eba-ec5b-4f94-8765-dbf39cd74860"},"source":["print(42)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["42\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kDQR47rsu1Qd","executionInfo":{"status":"ok","timestamp":1653847955981,"user_tz":420,"elapsed":6,"user":{"displayName":"Leo Huang","userId":"10046166245660810812"}},"outputId":"d4787136-71ac-4a9e-d603-f864a90445ba"},"source":["1+2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{},"execution_count":22}]},{"cell_type":"markdown","metadata":{"id":"o5Hu5vnUural"},"source":["## Items to try:\n"," * Add a code block after this by clicking the add code button on the top left.\n"," * Run its code by pressing ctrl + enter or command + enter\n"," * Try pressing shift + enter instead\n"," * Remove that code block"]},{"cell_type":"code","metadata":{"id":"SGiEmPSHwQTv"},"source":["# I exist"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HxoApR7Nyr3c"},"source":["### Here we import numpy\n","\n","Numpy allows you to manipulate and perform operations on matrices"]},{"cell_type":"code","metadata":{"id":"sbxR09nAzHku"},"source":["import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RCfmEO0kzH0c","executionInfo":{"status":"ok","timestamp":1653847156430,"user_tz":420,"elapsed":164,"user":{"displayName":"Leo Huang","userId":"10046166245660810812"}},"outputId":"d9621f4c-3c1d-4a25-d30f-96292a933c3c"},"source":["myVector = np.array([1, 2, 3, 4, 5, 6])\n","\n","print(myVector)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 2 3 4 5 6]\n"]}]},{"cell_type":"markdown","metadata":{"id":"mKmgEsGRdh59"},"source":["### There's some wack indexing you can do"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"txq3fudDdkoe","executionInfo":{"status":"ok","timestamp":1653847239651,"user_tz":420,"elapsed":169,"user":{"displayName":"Leo Huang","userId":"10046166245660810812"}},"outputId":"be59c316-2439-45f7-9388-3687ca72b056"},"source":["print(\"Second element \", myVector[1])\n","print(\"Last element \", myVector[-1])\n","print(\"Second and third elements\", myVector[1:3]) #myVector(start:stop). Start is inclusive, stop is exclusive\n","print(\"Every other element\", myVector[::2])\n","print(\"Every third element, starting at the second element\", myVector[1::3])\n","print(\"Elements in reverse order \", myVector[::-1])\n","print(\"Every other element in reverse order expect the first element\", myVector[:0:-1])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Second element  2\n","Last element  6\n","Second and third elements [2 3]\n","Every other element [1 3 5]\n","Every third element, starting at the second element [2 5]\n","Elements in reverse order  [6 5 4 3 2 1]\n","Every other element in reverse order expect the first element [6 5 4 3 2]\n"]}]},{"cell_type":"markdown","metadata":{"id":"c7gJZEGK02d9"},"source":["### You can even tell numpy to reshape it to whatever you want and it'll figure it out!"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SCKHx5uTzurP","executionInfo":{"status":"ok","timestamp":1653847247929,"user_tz":420,"elapsed":157,"user":{"displayName":"Leo Huang","userId":"10046166245660810812"}},"outputId":"979b393d-c1fc-4f6d-e7a1-c710f6048df7"},"source":["# Turn a 1x6 to a 3x2\n","myMatrix = myVector.reshape((3, 2))\n","\n","print(myMatrix)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1 2]\n"," [3 4]\n"," [5 6]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"yz0AQrWP1yxw"},"source":["### You can also apply scalar operations on a matrix!"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n4-9E9Ih18Ey","executionInfo":{"status":"ok","timestamp":1653847257759,"user_tz":420,"elapsed":169,"user":{"displayName":"Leo Huang","userId":"10046166245660810812"}},"outputId":"4f19d92c-fa4c-4085-f144-0fa0f9926926"},"source":["print(myMatrix * 10)\n","\n","print(\"___________ \\n\")\n","\n","print(myMatrix + 10)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[10 20]\n"," [30 40]\n"," [50 60]]\n","___________ \n","\n","[[11 12]\n"," [13 14]\n"," [15 16]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"nrsqoDXke-5h"},"source":["### And also some even wackier indexing"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m9VHGbxwfCa0","executionInfo":{"status":"ok","timestamp":1653847571450,"user_tz":420,"elapsed":206,"user":{"displayName":"Leo Huang","userId":"10046166245660810812"}},"outputId":"4146eb7e-182a-4a6e-f6d7-9ee434d13b83"},"source":["print(\"Top left element \", myMatrix[0][0])\n","print(\"Also top left element\", myMatrix[0, 0])\n","print(\"First row\", myMatrix[0])\n","print(\"All first rows (so just one) \", myMatrix[0:1:1])\n","print(\"Every other row\", myMatrix[::2])\n","print(\"First column\", myMatrix[0:3, 0]) #Aka, get every row (between 0 and 3), but only the 0th element of each row\n","print(\"Everything\", myMatrix[:]) #Essentially making a copy\n","print(\"Also first column\", myMatrix[:, 0]) #You can omit the 0:3\n","\n","print(myMatrix)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Top left element  1\n","Also top left element 1\n","First row [1 2]\n","All first rows (so just one)  [[1 2]]\n","Every other row [[1 2]\n"," [5 6]]\n","First column [1 3 5]\n","Everything [[1 2]\n"," [3 4]\n"," [5 6]]\n","Also first column [1 3 5]\n","[[1 2]\n"," [3 4]\n"," [5 6]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"WIqquXEjyzK2"},"source":["### Newaxis\n","Creates a new dimension. See examples:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tYSKiEOrzdez","executionInfo":{"status":"ok","timestamp":1653847723664,"user_tz":420,"elapsed":162,"user":{"displayName":"Leo Huang","userId":"10046166245660810812"}},"outputId":"ee5177af-c500-4146-f61d-da04ecba9d7d"},"source":["print(\"The vector \", myVector)\n","print(\"Making it into a 2D matrix by wrapping the whole vector in a list \", myVector[np.newaxis])\n","print(\"Also making it into a 2D matrix in the same way \", myVector[np.newaxis, :])\n","print(\"Making it into a 2D matrix, but wrapping each element in a new list \", myVector[:, np.newaxis])\n","print(\"Combining both of the above \", myVector[np.newaxis, :, np.newaxis])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The vector  [1 2 3 4 5 6]\n","Making it into a 2D matrix by wrapping the whole vector in a list  [[1 2 3 4 5 6]]\n","Also making it into a 2D matrix in the same way  [[1 2 3 4 5 6]]\n","Making it into a 2D matrix, but wrapping each element in a new list  [[1]\n"," [2]\n"," [3]\n"," [4]\n"," [5]\n"," [6]]\n","Combining both of the above  [[[1]\n","  [2]\n","  [3]\n","  [4]\n","  [5]\n","  [6]]]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cvbwAFrs6Htr","executionInfo":{"status":"ok","timestamp":1653847724429,"user_tz":420,"elapsed":143,"user":{"displayName":"Leo Huang","userId":"10046166245660810812"}},"outputId":"cac20c41-fd54-4427-d71e-07edd1daaad7"},"source":["print(\"\\n\\n The matrix \", myMatrix[:, :])\n","print(\"Wrapping whole matrix in list \", myMatrix[np.newaxis, :, :])\n","print(\"Wrapping each element in list \", myMatrix[:, :, np.newaxis])\n","print(\"Wrapping each row in list \", myMatrix[:, np.newaxis, :])\n","print(\"Wrapping each row in a list, keeping only the second column \", myMatrix[:, np.newaxis, 1])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","\n"," The matrix  [[1 2]\n"," [3 4]\n"," [5 6]]\n","Wrapping whole matrix in list  [[[1 2]\n","  [3 4]\n","  [5 6]]]\n","Wrapping each element in list  [[[1]\n","  [2]]\n","\n"," [[3]\n","  [4]]\n","\n"," [[5]\n","  [6]]]\n","Wrapping each row in list  [[[1 2]]\n","\n"," [[3 4]]\n","\n"," [[5 6]]]\n","Wrapping each row in a list, keeping only the second column  [[2]\n"," [4]\n"," [6]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"lxLdx3XiklWU"},"source":["# Items to try"]},{"cell_type":"code","metadata":{"id":"zCTxucQhkniA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653847850350,"user_tz":420,"elapsed":134,"user":{"displayName":"Leo Huang","userId":"10046166245660810812"}},"outputId":"501facdb-1d3a-43b6-f714-e109e1a7402d"},"source":["favoriteNumbers = [42, 21, 7, 84, 64, 101010, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n","terribleNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n","\n","# Print every third element of favorite numbers\n","print(favoriteNumbers[2::3])\n","\n","# Make an np array with the first row being favorite numbers, and the second being terrible numbers\n","table = np.array([favoriteNumbers, terribleNumbers])\n","\n","# Get the third column of the table\n","print(table)\n","print(table[:,2])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[7, 101010, 30, 60, 90]\n","[[    42     21      7     84     64 101010     10     20     30     40\n","      50     60     70     80     90    100]\n"," [     1      2      3      4      5      6      7      8      9     10\n","      11     12     13     14     15     16]]\n","[7 3]\n"]}]},{"cell_type":"markdown","metadata":{"id":"kIG3kaMS42MO"},"source":["### Matplotlib\n","Allows you to grab your vectors and matrices and plot them against each other"]},{"cell_type":"code","metadata":{"id":"rbQLHLDw4-I6"},"source":["import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"xf8uJuF6525o","executionInfo":{"status":"ok","timestamp":1653847909214,"user_tz":420,"elapsed":400,"user":{"displayName":"Leo Huang","userId":"10046166245660810812"}},"outputId":"c0f6fa6e-ec94-4dc3-cfde-de88f5320573"},"source":["plt.scatter(np.array([1,2.5,3.5,4, 5]), np.array([1,2,3,4,5]),  color='black')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x7f18704be810>"]},"metadata":{},"execution_count":18},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"M3yybDKA6FWG","executionInfo":{"status":"ok","timestamp":1653847914898,"user_tz":420,"elapsed":472,"user":{"displayName":"Leo Huang","userId":"10046166245660810812"}},"outputId":"693aa53a-64c6-4f45-85e1-494f7158d8a9"},"source":["plt.plot(np.array([1,2.5,3.5,4]), np.array([1,2,3,4]),  color='blue', linewidth=4)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f186ffbdf50>]"]},"metadata":{},"execution_count":19},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":262},"id":"vxyrsUUQBCjh","executionInfo":{"status":"ok","timestamp":1653847917270,"user_tz":420,"elapsed":162,"user":{"displayName":"Leo Huang","userId":"10046166245660810812"}},"outputId":"25010a96-0dba-407f-920f-4ee19f842105"},"source":["plt.scatter(np.array([1,2.5,3.5,4, 5]), np.array([1,2,3,4,5]),  color='black')\n","plt.plot(np.array([1,2.5,3.5,4]), np.array([1,2,3,4]),  color='blue', linewidth=4)\n","\n","plt.xlabel(\"My favorite X axis\")\n","plt.ylabel(\"My favorite Y axis\")\n","\n","plt.xticks(())\n","plt.yticks(())\n","\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"RkS6Q37JwjO0"},"source":["# You're done!\n","\n","### You should be proud of yourself."]},{"cell_type":"code","metadata":{"id":"94tGfstnA3Z8"},"source":[""],"execution_count":null,"outputs":[]}]}